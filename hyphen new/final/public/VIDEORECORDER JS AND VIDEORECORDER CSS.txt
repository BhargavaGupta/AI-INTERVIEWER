

VIDEO RECORDER.JS AND VIDEORECORDER.CSS WORKING WITHOUT AS OF ERORRS ON THE DATE :-15 AUG 6:00PM











import React, { useState, useRef, useEffect } from 'react';
import './styles/VideoRecorder.css';

const interviewQuestions = [
    "What is your greatest strength?",
    "Describe a time when you faced a challenge at work.",
    "Why do you want to work at our company?",
    "How do you handle stress and pressure?",
    "What are your career goals?",
    "Can you give an example of a time when you showed leadership?",
    "How do you prioritize your work?"
];

const VideoRecorder = ({ onStopRecording }) => {
    const [isRecording, setIsRecording] = useState(false);
    const [showFinishButton, setShowFinishButton] = useState(false);
    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    const [timeLeft, setTimeLeft] = useState(10);  // Countdown timer
    const mediaRecorderRef = useRef(null);
    const videoRef = useRef(null);
    const questionIntervalRef = useRef(null);
    const countdownIntervalRef = useRef(null);

    const startRecording = async () => {
        console.log('navigator.mediaDevices:', navigator.mediaDevices);
        const stream = await navigator.mediaDevices.getUserMedia({ video: true });
        videoRef.current.srcObject = stream;
        const mediaRecorder = new MediaRecorder(stream);
        mediaRecorderRef.current = mediaRecorder;

        mediaRecorder.ondataavailable = (event) => {
            // You can handle the data here if needed
        };

        mediaRecorder.onstop = () => {
            stream.getTracks().forEach((track) => track.stop());

            if (onStopRecording) {
                onStopRecording();
            }
            
            // Stop the intervals when recording stops
            clearInterval(questionIntervalRef.current);
            clearInterval(countdownIntervalRef.current);

            // Show the "Finish Exam" button
            setShowFinishButton(true);
        };

        mediaRecorder.start();
        setIsRecording(true);

        // Start changing questions every 10 seconds
        questionIntervalRef.current = setInterval(() => {
            setCurrentQuestionIndex((prevIndex) => {
                const nextIndex = prevIndex + 1;
                if (nextIndex >= interviewQuestions.length) {
                    return 0; // Reset to the first question if the end is reached
                }
                return nextIndex;
            });
            setTimeLeft(10); // Reset countdown timer to 10 seconds
        }, 10000); // Change question every 10 seconds

        // Start the countdown timer
        countdownIntervalRef.current = setInterval(() => {
            setTimeLeft((prevTime) => {
                if (prevTime <= 1) {
                    return 10; // Reset to 10 when the timer reaches 0
                }
                return prevTime - 1;
            });
        }, 1000); // Update countdown every second
    };

    const stopRecording = () => {
        mediaRecorderRef.current.stop();
        setIsRecording(false);
    };

    useEffect(() => {
        return () => {
            // Clear the intervals if the component is unmounted while recording
            if (questionIntervalRef.current) {
                clearInterval(questionIntervalRef.current);
            }
            if (countdownIntervalRef.current) {
                clearInterval(countdownIntervalRef.current);
            }
        };
    }, []);

    return (
        <div className="video-recorder">
            <h2>
                {interviewQuestions[currentQuestionIndex]}
                <span style={{ marginLeft: '10px', color: 'red' }}>
                    ({timeLeft} seconds left for next question)
                </span>
            </h2> {/* Display the current question and countdown */}
            <video ref={videoRef} autoPlay muted className="video-preview" />
            <div className="controls">
                {!isRecording && !showFinishButton ? (
                    <button onClick={startRecording} className="btn btn-start">Start Recording</button>
                ) : isRecording ? (
                    <button onClick={stopRecording} className="btn btn-stop">Stop Exam</button>
                ) : (
                    <button className="btn btn-finish">Finish Exam</button>
                )}
            </div>
        </div>
    );
};

export default VideoRecorder;








video recorder working as of 15 aug 6:00pm




















video recorder css:--














.video-preview-container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh; /* Full height of the viewport */
}

video {
    max-width: 80%;
    max-height: 80%;
    border: 4px solid #ccc;
    margin-left: 600px;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
    border-radius: 8px;
}





